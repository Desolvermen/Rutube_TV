import requests
import os
import base64
import time
from datetime import datetime

# –£–∫–∞–∂–∏—Ç–µ —Å–ø–∏—Å–æ–∫ URL API –∏ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞–Ω–∞–ª–æ–≤
api_data = [
    ("https://rutube.ru/api/play/options/c58f502c7bb34a8fcdd976b221fca292/", "–ü–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª HD"),
    ("https://rutube.ru/api/play/options/c37cd74192c6bc3d6cd6077c0c4fd686/", "–ù–¢–í HD"),
    ("https://rutube.ru/api/play/options/546602986e6a424d74d594876ddb3f04/", "–¢–ù–¢ HD"),
    ("https://rutube.ru/api/play/options/c801a7087e29a097192d74c270fbc6c1/", "–¢–ù–¢-4 HD"),
    ("https://rutube.ru/api/play/options/7bf12d9c050f9a7ef3728db5730432ae/", "–¢–í-3 HD"),
    ("https://rutube.ru/api/play/options/9f87a9a0cecbe773be6fddcbd93585ac/", "–ü—è—Ç–Ω–∏—Ü–∞! HD"),
    ("https://rutube.ru/api/play/options/310744c10a5809da38aa445c952976da/", "–°—É–±–±–æ—Ç–∞! HD"),
    ("https://rutube.ru/api/play/options/9ae8e8a6dc58bdad66190475f9872ecd/", "Rutube TV HD"),
    ("https://rutube.ru/api/play/options/c9b87c0b00cfff9b37f95b9c8e4eed42/", "–°–æ–ª–æ–≤—å—ë–≤ Live HD"),
    ("https://rutube.ru/api/play/options/11bbbec75a2ceb8cf446ad16813c6eec/", "–ú–∞—Ç—á! –¢–í HD"),
    ("https://rutube.ru/api/play/options/df6fe73494a26f74da51573fd97b9baa/", "–ú—É–∑-–¢–í HD"),
    ("https://rutube.ru/api/play/options/5c9327074e25ca86f3111d4085cbbb65/", "–Æ-–¢–í HD"),
    ("https://rutube.ru/api/play/options/faa934385b83f9e8a92f5484defae5fa/", "–û–¢–† HD"),
    ("https://rutube.ru/api/play/options/5ab908fccfac5bb43ef2b1e4182256b0/", "–ó–≤–µ–∑–¥–∞ HD"),
    ("https://rutube.ru/api/play/options/afef67d151b5a607dee1ef0aa299a52c/", "–ú–∏—Ä HD"),
    ("https://rutube.ru/api/play/options/43269ba8fb179e298b1e497f557e8d2d/", "–ú–∏—Ä 24 HD"),
    ("https://rutube.ru/api/play/options/88f6485ee28d56daf13302ac6fe3d931/", "–†–ë–ö HD"),
    ("https://rutube.ru/api/play/options/1f550a23c44ec7f287324b0b3e4f5a29/", "–û–°–ù HD"),
    ("https://rutube.ru/api/play/options/07beff61e617797db550cc3a5f6ad92b/", "–¢–µ–ª–µ–∫–∞–Ω–∞–ª 360¬∞ HD"),
    ("https://rutube.ru/api/play/options/d14fcf59cb7d07a26c48ebc8c6565f44/", "360¬∞ –ù–æ–≤–æ—Å—Ç–∏ HD"),
    ("https://rutube.ru/api/play/options/f6a6d5c955180d0d0f80c66d0b6150d3/", "–í–º–µ—Å—Ç–µ-–†–§ HD"),
    ("https://rutube.ru/api/play/options/91815da4edb167b5bd617bae490e57da/", "–¶–∞—Ä—å–≥—Ä–∞–¥ HD"),
    ("https://rutube.ru/api/play/options/80b308e455f2aceb498e5dccd58ca050/", "–°–æ—é–∑ HD"),
    ("https://rutube.ru/api/play/options/392b4686b770bae2da6bf5ac4574add5/", "2—Ö2 HD"),
    ("https://rutube.ru/api/play/options/2f052691c75d72b3ed7f3c33ea956a41/", "–°–º–∞–π–ª –¢–í HD"),
    ("https://rutube.ru/api/play/options/2b06a5c4c688fdc05014acb4cba83de0/", "Moonbug Kids TV HD (eng)"),
    ("https://rutube.ru/api/play/options/0e9e44725d5d5ab7ee92c10b40215419/", "Mr.Bean Cartoon HD (eng)"),
    ("https://rutube.ru/api/play/options/1da5d92af8c55b16241f1eb12a27f00c/", "–û—Ö–æ—Ç–Ω–∏–∫ –∏ —Ä—ã–±–æ–ª–æ–≤ Int HD"),
    ("https://rutube.ru/api/play/options/406973c72e9d0449feef05ef7811ad01/", "–ó–∞–≥–æ—Ä–æ–¥–Ω—ã–π Int HD"),
    ("https://rutube.ru/api/play/options/5a294ae1ed12c44c7053301fb5fa9ba0/", "–¢–ù–¢ Music HD"),
    ("https://rutube.ru/api/play/options/b1eb8e90d7e636677b3eb73b4fcbb717/", "RU.TV HD"),
    ("https://rutube.ru/api/play/options/f712ae5ff3db23ec09b3674133d44daa/", "VIVA Russia HD"),
    ("https://rutube.ru/api/play/options/965a025e4ebbaf0957415f80c6de8534/", "–ú—É–∑—ã–∫–∞ –ú–æ–¥–∞ –¢–í HD"),
    ("https://rutube.ru/api/play/options/bc1b811349f526188c839d377913e16a/", "Kronehit TV HD"),
    ("https://rutube.ru/api/play/options/ee6a3d5ba98066c2aaace3c428a3170c/", "World Fashion Channel HD"),
    ("https://rutube.ru/api/play/options/47fdffd6ab82bbab0a19039d7018839f/", "Deluxe Dance HD"),
    ("https://rutube.ru/api/play/options/047ba54d846ee185b4209a797a2ae138/", "NOW:Rock HD"),
    ("https://rutube.ru/api/play/options/09e51eefa939595a4ac67182c6fb3e4e/", "–ö–∏–Ω–æ –∏ –ñ–∏–∑–Ω—å HD"),
    ("https://rutube.ru/api/play/options/3b7d1499da9396462bfd17282d758d30/", "–ö–∏–Ω–æ–ª–∞—Ñ—Ñ–∫–∞ HD"),
    ("https://rutube.ru/api/play/options/4965b7b928c4a143d708ab424be01d37/", "–ö–∏–Ω–æ–∂–µ–ª–µ–∑–æ HD"),
    ("https://rutube.ru/api/play/options/dcc02ed1ff97923541c6d4c030c54c65/", "Comedy Hub HD"),
    ("https://rutube.ru/api/play/options/99d4597cea881a27cf7dd6e65a74dade/", "–ü–ª—é—Å –ú–∏–Ω—É—Å 16 HD")
]

def get_stream_url_advanced(api_url, channel_name):
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è URL –ø–æ—Ç–æ–∫–∞"""
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Accept': 'application/json, text/plain, */*',
        'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
        'Origin': 'https://rutube.ru',
        'Referer': 'https://rutube.ru/',
        'Sec-Fetch-Dest': 'empty',
        'Sec-Fetch-Mode': 'cors',
        'Sec-Fetch-Site': 'same-origin'
    }
    
    try:
        print(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –¥–ª—è: {channel_name}")
        
        # –ú–µ—Ç–æ–¥ 1: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ API
        response = requests.get(api_url, headers=headers, timeout=10)
        
        if response.status_code != 200:
            print(f"  ‚ùå HTTP {response.status_code} –¥–ª—è {channel_name}")
            return None
            
        data = response.json()
        
        # –ü–æ–∏—Å–∫ –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö –æ—Ç–≤–µ—Ç–∞
        stream_url = None
        
        # –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ –≤ live_streams -> hls
        if not stream_url:
            hls_streams = data.get('live_streams', {}).get('hls', [])
            for stream in hls_streams:
                url = stream.get('url')
                if url and 'm3u8' in url:
                    stream_url = url
                    print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ live_streams.hls")
                    break
        
        # –ú–µ—Ç–æ–¥ 3: –ü–æ–∏—Å–∫ –≤ video_meta
        if not stream_url:
            video_meta = data.get('video_meta', {})
            url = video_meta.get('url')
            if url and 'm3u8' in url:
                stream_url = url
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ video_meta")
        
        # –ú–µ—Ç–æ–¥ 4: –ü–æ–∏—Å–∫ –≤ –¥—Ä—É–≥–∏—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª—è—Ö
        if not stream_url:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏ –≤ JSON
            possible_paths = [
                ['video', 'url'],
                ['streams', 0, 'url'],
                ['hls_url'],
                ['m3u8_url'],
                ['playlist', 'url']
            ]
            
            for path in possible_paths:
                try:
                    current = data
                    for key in path:
                        if isinstance(key, int) and isinstance(current, list) and len(current) > key:
                            current = current[key]
                        elif isinstance(current, dict) and key in current:
                            current = current[key]
                        else:
                            break
                    else:
                        if current and 'm3u8' in str(current):
                            stream_url = current
                            print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –ø—É—Ç—å {path}")
                            break
                except:
                    continue
        
        # –ú–µ—Ç–æ–¥ 5: –ï—Å–ª–∏ –µ—Å—Ç—å ID, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π API
        if not stream_url and '/' in api_url:
            try:
                video_id = api_url.split('/')[-2] if api_url.endswith('/') else api_url.split('/')[-1]
                alt_url = f"https://rutube.ru/api/playlist/options/{video_id}/"
                alt_response = requests.get(alt_url, headers=headers, timeout=5)
                if alt_response.status_code == 200:
                    alt_data = alt_response.json()
                    # –ü–æ–∏—Å–∫ –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
                    for item in alt_data.get('results', []):
                        for stream in item.get('live_streams', {}).get('hls', []):
                            url = stream.get('url')
                            if url and 'm3u8' in url:
                                stream_url = url
                                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π API")
                                break
                        if stream_url:
                            break
            except:
                pass
        
        if stream_url:
            # –û—á–∏—Å—Ç–∫–∞ URL –æ—Ç –ª–∏—à–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if '?' in stream_url:
                base_url = stream_url.split('?')[0]
                if base_url.endswith('.m3u8'):
                    stream_url = base_url
            
            print(f"  üì∫ URL: {stream_url[:80]}..." if len(stream_url) > 80 else f"  üì∫ URL: {stream_url}")
            return stream_url
        else:
            print(f"  ‚ùå –ü–æ—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API")
            # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            print(f"  üîç –ö–ª—é—á–∏ –≤ –æ—Ç–≤–µ—Ç–µ: {list(data.keys()) if isinstance(data, dict) else '–ù–µ dict'}")
            return None
            
    except requests.exceptions.Timeout:
        print(f"  ‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ")
        return None
    except requests.exceptions.RequestException as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        return None
    except Exception as e:
        print(f"  üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None

def create_playlist():
    """–°–æ–∑–¥–∞–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"""
    try:
        playlist_content = ["#EXTM3U"]
        playlist_content.append(f"#EXTM3U url-tvg=\"https://i.mjh.nz/ru/tvg.xml\"")
        playlist_content.append(f"#PLAYLIST: Rutube TV Channels")
        playlist_content.append(f"#Updated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        playlist_content.append("")
        
        successful_channels = 0
        failed_channels = []

        print("üé¨ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –ø–ª–µ–π–ª–∏—Å—Ç–∞...")
        print("=" * 50)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ URL API —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        for i, (api_url, channel_name) in enumerate(api_data):
            print(f"\nüì° –ö–∞–Ω–∞–ª {i+1}/{len(api_data)}: {channel_name}")
            
            stream_url = get_stream_url_advanced(api_url, channel_name)
            
            if stream_url:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –ø–ª–µ–π–ª–∏—Å—Ç
                playlist_content.append(f"#EXTINF:-1 tvg-id=\"{channel_name}\" tvg-name=\"{channel_name}\" group-title=\"Rutube\",{channel_name}")
                playlist_content.append(stream_url)
                successful_channels += 1
                print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ –ø–ª–µ–π–ª–∏—Å—Ç")
            else:
                failed_channels.append(channel_name)
                print(f"  ‚ùå –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            if i < len(api_data) - 1:
                time.sleep(0.5)

        print("\n" + "=" * 50)
        print(f"üìä –ò–¢–û–ì: –£—Å–ø–µ—à–Ω–æ {successful_channels}/{len(api_data)}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –≤ –∫–æ–Ω–µ—Ü –ø–ª–µ–π–ª–∏—Å—Ç–∞
        playlist_content.append("")
        playlist_content.append("# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        playlist_content.append(f"# –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {len(api_data)}")
        playlist_content.append(f"# –£—Å–ø–µ—à–Ω–æ: {successful_channels}")
        playlist_content.append(f"# –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {len(failed_channels)}")
        
        if failed_channels:
            playlist_content.append("# –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å:")
            for failed in failed_channels:
                playlist_content.append(f"# - {failed}")
        
        return "\n".join(playlist_content), successful_channels, len(failed_channels)
        
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}")
        return None, 0, len(api_data)

class GitHubUploader:
    def __init__(self, token, repo_owner, repo_name):
        self.token = token
        self.repo_owner = repo_owner
        self.repo_name = repo_name
        self.base_url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/contents"
        
    def get_headers(self):
        return {
            "Authorization": f"token {self.token}",
            "Accept": "application/vnd.github.v3+json"
        }
    
    def get_file_sha(self, file_path):
        """–ü–æ–ª—É—á–∞–µ—Ç SHA —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            url = f"{self.base_url}/{file_path}"
            response = requests.get(url, headers=self.get_headers())
            if response.status_code == 200:
                return response.json()["sha"]
            return None
        except:
            return None
    
    def upload_file(self, file_path, content, commit_message):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"""
        try:
            # –ö–æ–¥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ base64
            content_b64 = base64.b64encode(content.encode('utf-8')).decode('utf-8')
            
            url = f"{self.base_url}/{file_path}"
            data = {
                "message": commit_message,
                "content": content_b64,
                "branch": "main"
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
            sha = self.get_file_sha(file_path)
            if sha:
                data["sha"] = sha
            
            response = requests.put(url, headers=self.get_headers(), json=data)
            
            if response.status_code in [200, 201]:
                print(f"‚úÖ –§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ GitHub")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ GitHub: {e}")
            return False

def update_playlist_on_github():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞ –Ω–∞ GitHub"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    github_token = os.getenv('GITHUB_TOKEN')
    if not github_token:
        print("‚ùå –û—à–∏–±–∫–∞: GITHUB_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    repo_owner = "Desolvermen"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à username
    repo_name = "Rutube_TV"   # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç
    print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞...")
    playlist_content, success_count, fail_count = create_playlist()
    
    if not playlist_content:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç")
        return False
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ GitHub
    print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –≤ GitHub...")
    uploader = GitHubUploader(github_token, repo_owner, repo_name)
    
    commit_message = f"Auto-update: {success_count} channels, {fail_count} failed - {datetime.now().strftime('%Y-%m-%d %H:%M')}"
    
    success = uploader.upload_file("Rutube_TV.m3u8", playlist_content, commit_message)
    
    if success:
        print(f"üéâ –ü–ª–µ–π–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω! {success_count} –∫–∞–Ω–∞–ª–æ–≤")
    else:
        print("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞")
        
    return success

def create_local_playlist():
    """–°–æ–∑–¥–∞–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç –ª–æ–∫–∞–ª—å–Ω–æ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    playlist_content, success_count, fail_count = create_playlist()
    
    if playlist_content:
        try:
            with open('Rutube_TV.m3u8', 'w', encoding='utf-8') as f:
                f.write(playlist_content)
            print(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç —Å–æ–∑–¥–∞–Ω: {success_count} —É—Å–ø–µ—à–Ω–æ, {fail_count} —Å –æ—à–∏–±–∫–∞–º–∏")
            print("üìÅ –§–∞–π–ª: Rutube_TV.m3u8")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return False
    return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ Rutube Playlist Updater")
    print("=" * 40)
    
    # –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ GitHub Actions, –∏—Å–ø–æ–ª—å–∑—É–µ–º GitHub –∑–∞–≥—Ä—É–∑–∫—É
    if os.getenv('GITHUB_ACTIONS') == 'true':
        print("üåê –†–µ–∂–∏–º: GitHub Actions")
        success = update_playlist_on_github()
        exit(0 if success else 1)
    else:
        # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
        print("üíª –†–µ–∂–∏–º: –õ–æ–∫–∞–ª—å–Ω—ã–π")
        success = create_local_playlist()
        if success:
            print("‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
